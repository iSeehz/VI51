/**
 * 
 */
package fr.utbm.vi51.^agent

import fr.utbm.vi51.^event.AreYouAwoken
import fr.utbm.vi51.^event.CreateLemmingsAgent
import fr.utbm.vi51.^event.GiveBody
import fr.utbm.vi51.^event.IamAwoken
import fr.utbm.vi51.^event.MAJGrid
import fr.utbm.vi51.^event.MAJTable
import fr.utbm.vi51.^event.StartSimulation
import fr.utbm.vi51.^event.StopSimulation
import fr.utbm.vi51.gui.FrameProject
import fr.utbm.vi51.model.EnvironmentModel
import io.sarl.core.AgentTask
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.List
import fr.utbm.vi51.^event.WantPerception

/**
 * @author tiboty
 *
 */
agent EnvironmentAgent {
	uses DefaultContextInteractions, Logging, Lifecycle, Schedules, Behaviors
	var initAgent : AgentTask
	var listOfGUID : List<Address>
	var environment:EnvironmentModel
	var gui:FrameProject
	var numberOfLemmingsMinds:int
	var numberOfLemmingsBody:int = 0
	on Initialize{
		
		this.listOfGUID = new ArrayList<Address>()
		this.numberOfLemmingsMinds = 1
		this.environment = new EnvironmentModel("lab_parachute.txt",this.numberOfLemmingsMinds)
		this.gui = new FrameProject(environment)
		
		wake(new CreateLemmingsAgent)
	}
	on CreateLemmingsAgent{
		
		var i:int
		for (i=0;i<this.numberOfLemmingsMinds;i++){
			spawn(typeof(LemmingAgent))
		}
		
		initAgent = task("presentation")
		
		initAgent.every(1000) [
			emit(new AreYouAwoken)
		]
	}
	
	on IamAwoken{
		
		this.listOfGUID.add(occurrence.source)
		if(this.listOfGUID.size()==this.numberOfLemmingsMinds){
			initAgent.cancel
			
			//give index body for each Agent in the entry cell
			for (adr : listOfGUID){
				
				emit(new GiveBody(this.environment.getEntry().getListOfBodyInCell().get(this.listOfGUID.indexOf(adr)).getId()), Scopes::addresses(adr))
			}
		}

	}
	
	on StopSimulation {
		
		for(adr: listOfGUID){
			
			emit(new Destroy, Scopes::addresses(adr))
		}
				
	}
	
	on WantPerception{
		
		this.numberOfLemmingsBody +=1
		
		if(this.listOfGUID.size()==this.numberOfLemmingsBody){
			
			wake(new StartSimulation)

		}
		
	}
	
	on StartSimulation {
		
		
	}
	
	
	on MAJTable {
		
	}
	
	on MAJGrid {
		
		
	}
}