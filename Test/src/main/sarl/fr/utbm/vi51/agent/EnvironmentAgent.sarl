/**
 * 
 */
package fr.utbm.vi51.^agent

import fr.utbm.vi51.controller.Controller
import fr.utbm.vi51.^event.AreYouAwoken
import fr.utbm.vi51.^event.ChangeLevel
import fr.utbm.vi51.^event.CreateLemmingsAgent
import fr.utbm.vi51.^event.GiveBody
import fr.utbm.vi51.^event.IamAwoken
import fr.utbm.vi51.^event.MAJGrid
import fr.utbm.vi51.^event.MAJTable
import fr.utbm.vi51.^event.ResetAgentEnvironment
import fr.utbm.vi51.^event.StartSimulation
import fr.utbm.vi51.^event.StopSimulation
import fr.utbm.vi51.^event.WantPerception
import fr.utbm.vi51.gui.FrameProject
import fr.utbm.vi51.model.EnvironmentModel
import io.sarl.core.AgentTask
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.List

/**
 * @author tiboty
 *
 */
agent EnvironmentAgent {
	uses DefaultContextInteractions, Logging, Lifecycle, Schedules, Behaviors
	var initAgent : AgentTask
	var listOfGUID : List<Address>
	var environment:EnvironmentModel
	var gui:FrameProject
	var numberOfLemmingsMinds:int
	var numberOfLemmingsBody:int = 0
	var state:SimulationState
	
	on Initialize{
		wake(new ResetAgentEnvironment(1,"lab_parachute.txt"))
		wake(new CreateLemmingsAgent)
		var controller:Controller = new Controller(defaultSpace);
		this.gui = new FrameProject(environment, controller)
	}
	on CreateLemmingsAgent{
		
		var i:int
		for (i=0;i<this.numberOfLemmingsMinds;i++){
			spawn(typeof(LemmingAgent))
		}
		
		initAgent = task("presentation")
		
		initAgent.every(1000) [
			emit(new AreYouAwoken)
		]
	}
	
	on ResetAgentEnvironment{

		this.state = SimulationState.INIT;
		this.listOfGUID = new ArrayList<Address>()
		this.numberOfLemmingsMinds = occurrence.numberOfLemmings
		this.environment = new EnvironmentModel(occurrence.level,this.numberOfLemmingsMinds)
		
	}
	
	on IamAwoken{
		
		this.listOfGUID.add(occurrence.source)
		if(this.listOfGUID.size()==this.numberOfLemmingsMinds){
			initAgent.cancel

			//give index body for each Agent in the entry cell
			for (adr : listOfGUID){

				emit(new GiveBody(this.environment.getEntry().getListOfBodyInCell().get(this.listOfGUID.indexOf(adr)).getId()), Scopes::addresses(adr))
			}
		}

	}
	
	on StopSimulation[this.state != SimulationState.STOP || this.state == SimulationState.START ] {
		this.state = SimulationState.STOP
		println("fin simulation")
		for(adr: listOfGUID){
			
			emit(new Destroy, Scopes::addresses(adr))
		}
		this.listOfGUID.clear()
				
	}
	
	on WantPerception{
		
		this.numberOfLemmingsBody +=1
		
		if(this.listOfGUID.size()==this.numberOfLemmingsBody){
			
			// all set and ready to go
			println("Ready to go !")


		}
		
	}
	
	on ChangeLevel[this.state == SimulationState.STOP || this.state == SimulationState.INIT]{
		
		this.gui.getEnvironment().setGrid(occurrence.level,this.numberOfLemmingsMinds)
		this.gui.getMainPanel().getGridPanel().generate(this.gui.getEnvironment().getGrid())
	}
	
	on StartSimulation[this.state != SimulationState.START] {
		this.state = SimulationState.START
		if(this.listOfGUID.size() != 0){
			println("lancement simulation")
			
		//send perception to all Lemming Agent
		}else{
			println("ok")
			wake(new ResetAgentEnvironment(1,String.valueOf(this.gui.getOptionPanel().getChangeLevel().getSelectedItem())))
		}
		
		
	}
	
	
	on MAJTable {
		
	}
	
	on MAJGrid {
		
		
	}
}