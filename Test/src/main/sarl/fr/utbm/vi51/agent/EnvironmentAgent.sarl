
package fr.utbm.vi51.^agent

import fr.utbm.vi51.controller.Controller
import fr.utbm.vi51.^event.AllLemmingDig
import fr.utbm.vi51.^event.AllLemmingHalfTurn
import fr.utbm.vi51.^event.AreYouAwoken
import fr.utbm.vi51.^event.ChangeLevel
import fr.utbm.vi51.^event.ChangeLevelAndRebuildModel
import fr.utbm.vi51.^event.CreateLemmingsAgent
import fr.utbm.vi51.^event.GarbageAgent
import fr.utbm.vi51.^event.GiveBody
import fr.utbm.vi51.^event.IamAwoken
import fr.utbm.vi51.^event.Influence
import fr.utbm.vi51.^event.KillLemmingsAgents
import fr.utbm.vi51.^event.KillOneLemming
import fr.utbm.vi51.^event.MAJGrid
import fr.utbm.vi51.^event.Manager
import fr.utbm.vi51.^event.PerceptionEvent
import fr.utbm.vi51.^event.ResetAgentEnvironment
import fr.utbm.vi51.^event.ResetGrid
import fr.utbm.vi51.^event.StartSimulation
import fr.utbm.vi51.^event.StepByStepSimulation
import fr.utbm.vi51.^event.StopSimulation
import fr.utbm.vi51.^event.TerminateSimulation
import fr.utbm.vi51.^event.WantPerception
import fr.utbm.vi51.gui.FrameProject
import fr.utbm.vi51.model.EnvironmentModel
import fr.utbm.vi51.model.LemmingBody
import fr.utbm.vi51.model.PossibleMove
import fr.utbm.vi51.qlearning.MoveProb
import io.sarl.core.AgentTask
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.HashMap
import java.util.Iterator
import java.util.List
import java.util.Random


agent EnvironmentAgent {
	uses DefaultContextInteractions, Logging, Lifecycle, Schedules, Behaviors
	val numberChoice = 1
	var initAgent : AgentTask
	var listOfGUID : List<Address>
	var mapOfGUID : HashMap<Address,Integer >
	var environment:EnvironmentModel
	var gui:FrameProject
	var numberOfLemmingsMinds:int
	var numberOfLemmingsBodyLinked:int = 0
	var state:SimulationState
	var moveInfluences:HashMap<Integer, PossibleMove>
	var currentLevel:String
	var nextLevel:String
	var qlearning:MoveProb
	/* Variable for the user's order
	 * 0 : default
	 * 1 : all lemming have to dig
	 * 2 : all lemming have to move halfturn
	 * 3 : kill one lemming randomly
	*/
	var userOrder:int
	
	on Initialize{
		this.currentLevel = "Etages.txt"
		this.nextLevel = "Etages.txt"
		this.numberOfLemmingsMinds = numberChoice
		wake(new ResetAgentEnvironment())
		var controller:Controller = new Controller(defaultSpace, defaultAddress);
		this.gui = new FrameProject(this.environment, controller)
		this.qlearning = new MoveProb()
		this.gui.getOptionPanel().updateTab(this.numberOfLemmingsMinds,0,0)
	}
	
	
	on CreateLemmingsAgent{
		
		var i:int
		for (i=0;i<this.numberOfLemmingsMinds;i++){
			spawn(typeof(LemmingAgent))
		}
		
		initAgent = task("presentation")
		
		initAgent.every(1000) [
			emit(new AreYouAwoken)
		]
	}
	
	on ResetAgentEnvironment{
		this.userOrder = 0
		this.state = SimulationState.INIT
		this.mapOfGUID = new HashMap<Address, Integer>()
		this.moveInfluences = new HashMap<Integer,PossibleMove>()
		this.listOfGUID = new ArrayList<Address>()
		this.environment = new EnvironmentModel(this.nextLevel,this.numberOfLemmingsMinds,defaultSpace, defaultAddress)
		if (this.currentLevel != this.nextLevel){
			wake(new ChangeLevel(this.nextLevel))
			this.currentLevel = this.nextLevel
		}else{
			wake(new ResetGrid)
		}
		
		wake(new CreateLemmingsAgent)
	}
	
	on IamAwoken{
		
		this.listOfGUID.add(occurrence.source)
		if(this.listOfGUID.size()==this.numberOfLemmingsMinds){
			initAgent.cancel

			//give index body for each Agent in the entry cell
			for (adr : this.listOfGUID){
				this.mapOfGUID.put(adr,this.environment.getEntry().getListOfBodyInCell().get(this.listOfGUID.indexOf(adr)).getId())
				emit(new GiveBody(this.environment.getEntry().getListOfBodyInCell().get(this.listOfGUID.indexOf(adr)).getId()), Scopes::addresses(adr))
			}
		}

	}
	
	on WantPerception{
		
		this.numberOfLemmingsBodyLinked +=1
		
		if(this.mapOfGUID.size()==this.numberOfLemmingsBodyLinked){
		}
		
	}
	
	on StartSimulation[this.state != SimulationState.START] {
		this.state = SimulationState.START
		sendPerceptionsToAgents()
		this.gui.getMainPanel().getTime().start()
		
		
		
		
	}
	
	def sendPerceptionsToAgents(){
		var keySetIterator:Iterator<Address>  = this.mapOfGUID.keySet().iterator()
		while(keySetIterator.hasNext()){
			  val key:Address = keySetIterator.next();

			
		    in (1000) [
		    	var body:LemmingBody = null
		    	var i:int=0
		    	while(i<this.environment.getListOfBody().size() && body == null){
		    		
		    		if(this.mapOfGUID.get(key).intValue() ==this.environment.getListOfBody().get(i).getId() ){
		    			
		    			body = this.environment.getListOfBody().get(i)
		    		}
		    		i++
		    	}
		    	try{emit(new PerceptionEvent(this.environment.getPerception(this.mapOfGUID.get(key).intValue()),body.getFatigue(),body.getOrientation(),body.isClimbing(),this.qlearning), Scopes::addresses(key))
		    
			} catch(E:Exception){
				println("Perception non reçu suite à l'arrêt prématuré du jeu")
			}
			]
		}
	}
	
	on StepByStepSimulation{
		this.state = SimulationState.STEP_BY_STEP
		this.gui.getMainPanel().getTime().start()
		sendPerceptionsToAgents()
		
	}
	
	on StopSimulation[this.state != SimulationState.STOP] {
		if(this.state != SimulationState.INIT){
			this.gui.getMainPanel().getTime().pause()
			this.gui.getMainPanel().getTime().restart()
			this.state = SimulationState.STOP
			this.numberOfLemmingsBodyLinked = 0
			this.mapOfGUID.clear()
			wake(new KillLemmingsAgents)
			this.listOfGUID.clear()
			numberOfLemmingsMinds=numberChoice
			this.gui.getOptionPanel().updateTab(this.numberOfLemmingsMinds,0,0)
			wake(new ResetAgentEnvironment())
		}else{
		}
		
				
	}
	
	
	
		
	on ChangeLevel[this.state == SimulationState.INIT]{
	
		this.gui.getEnvironment().setGrid(occurrence.level,this.numberOfLemmingsMinds)
		this.gui.getMainPanel().getGridPanel().generate(this.gui.getEnvironment().getGrid())
	}
	
	
	on ChangeLevelAndRebuildModel{
		this.nextLevel = occurrence.level
		if(this.state == SimulationState.INIT){
			this.environment = new EnvironmentModel(this.nextLevel,this.numberOfLemmingsMinds,defaultSpace, defaultAddress)
			this.currentLevel = this.nextLevel
			wake(new ChangeLevel(this.nextLevel))
		}
	}
	

	on AllLemmingDig[userOrder==0]{
		userOrder=1
		
	}
	
	on AllLemmingHalfTurn[userOrder==0]{
		userOrder=2
		
	}
	
	on KillOneLemming[userOrder==0]{
		
		if(this.environment.getNumberOfBody()==1){
			this.gui.getOptionPanel().getKillRandomLemming().setText("Erradication Interdite !");
			this.gui.getOptionPanel().getKillRandomLemming().setEnabled(false);
		}else{
			userOrder=3;
		}
	}
		
		
		
	// on influences from lemmings try to move them	
	on Influence[this.state != SimulationState.STOP]{
		
		
		this.moveInfluences.put(this.mapOfGUID.get(occurrence.source),occurrence.move)
		
		// if all the agents have given their influences
		if(this.moveInfluences.size() == this.numberOfLemmingsMinds){
			
			//check the userOrder to modify the simulator
			
			if(userOrder==1){
				
				var keySetIterator:Iterator<Integer>  = this.moveInfluences.keySet().iterator()
				while(keySetIterator.hasNext()){
			  		val key:Integer = keySetIterator.next();
				
					this.moveInfluences.put(key, PossibleMove.DIG)
				}
				userOrder=0
				
			}else if (userOrder==2){
				
				var keySetIterator:Iterator<Integer>  = this.moveInfluences.keySet().iterator()
				while(keySetIterator.hasNext()){
			  		val key:Integer = keySetIterator.next();
				
					this.moveInfluences.put(key, PossibleMove.MOVEBACKWARD)
				}
					
				userOrder=0
			}else if(userOrder==3){
				
				var index:int
				
				index = this.environment.generateRandomIndexBody()
				this.moveInfluences.put(index, PossibleMove.SUICIDE)
				
				userOrder=0
			}
			
			//move bodies
			var keySetIterator:Iterator<Integer>  = this.moveInfluences.keySet().iterator()
			while(keySetIterator.hasNext()){
			  var key:Integer = keySetIterator.next();
			  this.environment.moveBody(key, this.moveInfluences.get(key))

			}
			this.moveInfluences.clear();
			this.qlearning.write()
			wake(new MAJGrid)
			
		}
			
		

	}
	
	on GarbageAgent{
			var keySetIterator:Iterator<Address>  = this.mapOfGUID.keySet().iterator()
			var find:boolean =false
			while(!find && keySetIterator.hasNext()){
			  var key:Address = keySetIterator.next();
			  if(this.mapOfGUID.get(key) == occurrence.bodyIndex){
			  	emit(new Destroy,  Scopes::addresses(key))
			  	find = true
			  	this.mapOfGUID.remove(key)
			  	this.listOfGUID.remove(this.listOfGUID.indexOf(key))
			  	this.moveInfluences.remove(key)
			  	}
			}
			this.numberOfLemmingsMinds --
		}
		
	
	
	
	on Manager{
		if(!isFinish()){
			if(this.state == SimulationState.START){
			sendPerceptionsToAgents()
		}else if(this.state == SimulationState.STEP_BY_STEP){
			this.gui.getMainPanel().getTime().pause()
		}
		}else{
			// wait 3 sec before launching new game
			in(3000) [wake(new StopSimulation)]
		}
		
		
		
	}
	
	
	on MAJGrid{//maj gui
		
		this.gui.getMainPanel().getGridPanel().smartPaint(this.environment.getListOfChanges(),this.environment.getGrid())
		this.gui.getOptionPanel().updateTab(this.environment.getListOfBody().size(),this.environment.getOut(),this.environment.getDead())
		
		wake(new Manager)
	}
	
	
	on ResetGrid [this.gui != null]{

		this.gui.getMainPanel().getGridPanel().paint(this.environment.getGrid())

	}
	
	
	on KillLemmingsAgents{
		emit(new Destroy)
		
	}
	
	def isFinish():boolean{
		
		if(this.environment.getNumberOfBody() == 0){
			return true
		}
		
		for (body : this.environment.getListOfBody()){
			if(!body.isWinner()){
				return false
			}
		}
		return true
	}
	
	on TerminateSimulation{
		emit(new Destroy)
		killMe
	}
}