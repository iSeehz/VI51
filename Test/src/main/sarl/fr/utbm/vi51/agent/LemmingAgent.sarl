package fr.utbm.vi51.^agent

import fr.utbm.vi51.^event.AreYouAwoken
import fr.utbm.vi51.^event.GiveBody
import fr.utbm.vi51.^event.IamAwoken
import fr.utbm.vi51.^event.Influence
import fr.utbm.vi51.^event.PerceptionEvent
import fr.utbm.vi51.^event.WantPerception
import fr.utbm.vi51.model.Orientation
import fr.utbm.vi51.model.Percept
import fr.utbm.vi51.model.PossibleMove
import fr.utbm.vi51.model.TypeObject
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.util.Scopes
import java.util.List

agent LemmingAgent {
	uses DefaultContextInteractions, Logging, Lifecycle, Behaviors
	var presentation : boolean
	var index : int
	var percept : List <Percept>
	var previousAction : PossibleMove
	var previousState : int

	on Initialize {
		presentation = false
		previousAction = null
		previousState = -1
	}

	on AreYouAwoken [!presentation] {

		emit(new IamAwoken, Scopes::addresses(occurrence.source))
		presentation = true
	}

	on GiveBody {
		index = occurrence.index
		emit(new WantPerception, Scopes::addresses(occurrence.source))
	}

	on PerceptionEvent {
		
		this.percept = occurrence.perceptions
		var currentState : int = computeState(occurrence.fatigue, occurrence.orientation, occurrence.climbing)
		if(previousAction != null && previousState != -1) {
			occurrence.moveProb.reevaluate(previousState, previousAction, currentState)
		}println(currentState)
		println("fatigue" + occurrence.fatigue)
		var currentAction : PossibleMove = occurrence.moveProb.randomWeigthChoice(currentState)
		this.previousState = currentState this.previousAction = currentAction emit(new Influence ( currentAction ), Scopes::addresses(occurrence.source))
	}

	// compute the state to know the action he should do given the perception	
	def computeState(fatigue : float, ori : Orientation, climbing : boolean) : int {
		var NF = (fatigue < 3)
		var F = (fatigue < 5 && fatigue > 2)
		var FF = (fatigue > 4)
		var I = (percept.get(4).getType() == TypeObject.LAND)
		var A = (percept.get(2).getType() == TypeObject.LAND)
		var E = ((percept.get(7).getType() == TypeObject.LAND) || (percept.get(6).getType() == TypeObject.LAND) || (percept.get(5).getType() == TypeObject.LAND))
		if(!I && !climbing || !I && A)
		{
			return 0
		}
		else
		if(percept.get(1).getType() == TypeObject.EXIT || (percept.get(13).getType() == TypeObject.EXIT || percept.get(14).getType() == TypeObject.EXIT || percept.get(15).getType() == TypeObject.EXIT)) {
			if(ori == Orientation.LEFT) {
				return 1
			}
			else {
				return 3
			}
		}
		else
		if(percept.get(3).getType() == TypeObject.EXIT || (percept.get(12).getType() == TypeObject.EXIT || percept.get(11).getType() == TypeObject.EXIT || percept.get(10).getType() == TypeObject.EXIT)) {
			if(ori == Orientation.LEFT) {
				return 3
			}
			else {
				return 1
			}
		}
		else
		if(percept.get(5).getType() == TypeObject.EXIT || percept.get(6).getType() == TypeObject.EXIT || percept.get(7).getType() == TypeObject.EXIT) {
			return 5
		}
		else
		if((percept.get(8).getType() == TypeObject.EXIT || (percept.get(13).getType() == TypeObject.EXIT || percept.get(14).getType() == TypeObject.EXIT || percept.get(15).getType() == TypeObject.EXIT) && !FF) && !A) {
			if(ori == Orientation.LEFT) {
				return 2
			}
			else {
				return 4
			}
		}
		else
		if((percept.get(9).getType() == TypeObject.EXIT || (percept.get(10).getType() == TypeObject.EXIT || percept.get(11).getType() == TypeObject.EXIT || percept.get(12).getType() == TypeObject.EXIT) && !FF) && !A) {
			if(ori == Orientation.LEFT) {
				return 4
			}
			else {
				return 2
			}
		}
		/*-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-*/
		var DvM : boolean
		var DvI : boolean
		var DvE : boolean
		var DrM : boolean
		var DrI : boolean
		var DrE : boolean
		var Dv : boolean
		
		if(ori == Orientation.LEFT) {
			DvM = (percept.get(1).getType() == TypeObject.LAND)
			DrM = (percept.get(3).getType() == TypeObject.LAND)
			DvI = (percept.get(13).getType() == TypeObject.LAND)
			DrI = (percept.get(10).getType() == TypeObject.LAND)
			DvE = (percept.get(14).getType() == TypeObject.LAND || percept.get(15).getType() == TypeObject.LAND)
			DrE = (percept.get(11).getType() == TypeObject.LAND || percept.get(12).getType() == TypeObject.LAND)
			Dv = (percept.get(14).getType() == TypeObject.LAND )
		}
		else {
			DrM = (percept.get(1).getType() == TypeObject.LAND)
			DvM = (percept.get(3).getType() == TypeObject.LAND)
			DrI = (percept.get(13).getType() == TypeObject.LAND)
			DvI = (percept.get(10).getType() == TypeObject.LAND)
			DrE = (percept.get(14).getType() == TypeObject.LAND || percept.get(15).getType() == TypeObject.LAND)
			DvE = (percept.get(11).getType() == TypeObject.LAND || percept.get(12).getType() == TypeObject.LAND)
			Dv = (percept.get(11).getType() == TypeObject.LAND )
		}


		if(!DvM && (NF && DvI
		|| F && (DvI || DvE) && !DrM && !E && !DrE
		|| F && (DvI || DvE) && A && DrM && !E
		|| DvE && !E && !DrE
		|| (NF && Dv) ))
		{
			return 1
		}
		else
		if(!A && DvM && (NF || climbing || F && !DrM && !DrI && !DrE && !E)) {
			return 2
		}
		else
		if(!DrM && (NF && !DvI && !DvM && DrI || NF && A && DvM && DrI
		|| F && (DrI || DrE) && !E && (!DvE && !DvM && !DvI || DvM && A)
		|| DrE && !E && !DvE)) {
			return 3
		}
		else
		if(!A && DrM && !DvI && !DvE  && !DvM && (!E || (NF || F) && E)){
			return 4
		}
		else
		if(DrM && DvM && (A || FF)) {
			return 5
		}
		/*-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-__-*/
		else
		if(!DvM && !DrM && (FF || (F && (DvE || DvI) && (DrE || DrI) && E)||!DvI&& !DrI && DvE && DrE && E)) {
			return 6
		}
		else
		if(FF && DvM && !DrM || F && (DrE || DrI) && E && !DrM && DvM && A || (DrE || DrI) && E && !DvM && !DvE && !DvI) {
			return 7
		}
		else
		if(FF && DrM && !DvM || F && (DvE || DvI) && E && !DvM && DrM && A
		|| (DvE || DvI) && E && !DrM && !DrE && !DrI) {
			return 8
		}
		else
		if(F && DvM && !A && !DrM && E && (DrI || DrE)) {
			return 9
		}
		else
		if(F && DvM && !A && !DrM && !E && (DrI || DrE) 
			|| !DrI && !DrM && !DvI && !DvM && !E && DrE && DvE){
			return 10
		}
		else
		if(F && DrM && !A && !DvM && E && (DvI || DvE)) {
			return 11
		}
		else
		if(F && DrM && !A && !DvM && !E && (DvI || DvE)) {
			return 12
		}
		else
		if(F && !E && (DvI || DvE) && (DrI || DrE) && !DrM && !DvM) {
			return 13
		}
		else
		if(F && !A && DvM && DrM && !E) {
			return 14
		}
		else
		if(F && !DvI && !DvE && !DvM && DrM && !A && E) {
			return 15
		}
		else
		if(F && !DrI && !DrE && !DrM && DvM && !A && E) {
			return 16
		}
		else
		if(F && !A && DvM && DrM && E) {
			return 17
		}
		else {
			return 6
		}
	}
}